* Thread Pool
* Job(Task)을 넣을 수 있는 타입 (작업 생성)
(1) Runnable	-> 리턴값 X (void)
(2) Callable	-> 리턴값 O

* 스레드풀의 JobQ에 Task 제출 (작업처리 요청)
void	execute(Runnable task);
		--> 예외 발생시 메세지 출력, 스레드는 파괴, 작업처리결과 X
Future	submit(Runnable task);	--> 예외 발생시 메세지 X, 스레드는 유지
Future	submit(Runnable task, V result);-> 작업처리결과 O
Future	submit(Callable<V> task);		-> 작업처리결과 O

* Future 객체 (Blocking)
작업 결과가 아닌 지연 완료 객체
작업 완료 후 get() 메소드 사용
	-get(long timeout, TimeUnit unit)
	: timeout 내에 작업 완료시 V 리턴, 아닐시 TimeoutException 발생

* 스레드풀 생성
Executors.newFixedThreadPool(int nThread)
Executors.newCachedThreadPool()

* Shrinking (슈링킹)
idle Time을 초과한 스레드를 최소개수(코어스레드수)로 원복

* 스레드풀 종료
(1) shutdown()		-> 모든 작업 처리후 종료
(2) shutdownNow()
	-> 처리중인 스레드도 작업중지, 리턴값=미처리된 작업(Runnable)의 목록
(3) awaitTermination, long timeout, TimeUnit unit
	-> shutdown() 호출후, timeout 내에 작업완료시 -> true, 아닐시 중지하고 -> false

