* 열거 상수
	-heap 영역에 자동으로 생성
	-하나하나마다 객체
	-부모 클래스인 Enum에서 상속받는 메소드들이 있음
		-name : 열거 상수의 이름을 반환
		-ordinal : 선언된 순서를 0번부터 계산하여 반환
		-compareTo : 기준객체.compareTo(비교대상객체); 둘의 차이를 비교 계산하여 int값으로 반환
			* 같으면 0, 작으면 음수, 크면 양수
		-valueOf : Week weekDay = Week.valueOf("SUNDAY"); 문자열 리터럴을 열거상수로 변환
		-values : Week[] days = Week.values(); 열거타입의 배열
	-숫자는 맨 앞에 올 수 없다

* 속성 (Attribute)
	-객체의 특징(클래스 내의 필드)

* OOP의 3가지 기둥
	- 클래스 	-> 캡슐화
	- 상속 		-> 다형성
	- 인터페이스 -> 다형성
		
		* 캡슐화
			-객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감춤
			-캡슐화된 멤버를 노출시킬지 숨길지 결정하기 위해 접근 제한자(Access Modifier) 사용
			-외부의 잘못된 사용으로 인해 객체가 손상되지 않도록

		* 상속
			-상속 대상: 필드와 메소드
			-객체의 다형성 구현, 유지 보수의 편리, 상위 객체를 재사용해 하위 객체를 빨리 개발

		* 다형성
			-같은 타입이지만 / 실행 결과가 다양한 / 객체를 대입할 수 있는 성질
			-부모 타입에는 모든 자식 객체가 대입, 인터페이스 타입에는 모든 구현 객체가 대입
			-객체를 부품화

		* 클래스
			-객체를 생성하기 위한 필드와 메소드가 정의
			-클래스로부터 만들어진 객체를 해당 클래스의 인스턴스(Instance)
			-하나의 클래스에서 여러 개의 인스턴스를 만들 수 있음
			-Class name = 패키지명 + Class명 - Fully-Qualified Class Name (FQCN)
			-소스 파일 이름과 동일한 클래스만 public 선언 가능
			-두개 이상의 클래스도 선언 가능

* 객체 (Object)
	-추상적인 것(회사, 날짜)중에서 자신의 속성과 동작을 가지는 모든 것
	-필드(속성)과 메소드(동작, 행위)로 구성된 자바 객체로 모델링 가능
	-객체들은 서로간에 기능(동작)을 이용하고 데이터를 주고 받음
	-객체의 데이터는 객체 안의 필드

* 객체간의 관계
	-집합 관계: 완성품과 부품의 관계
	-사용 관계: 객체가 다른 객체를 사용하는 관계
	-상속 관계: 종류 객체와 구체적인 사물 객체 관계

** 객체 모델링
	* 인스턴스 필드
		-객체가 생성되어야만 존재함

	* 정적 필드(static)
		-객체와 무관한 공유되는 필드
		-클래스에 소속된 멤버