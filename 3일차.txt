* 문자열 리터럴(String) - heap에 생성, 한번만 생성, 주소를 공유, 상수의 성격(상수는 아님)

String str1 = "JDK" + 6.0; => 6.0은 String 타입으로 형변환
String str3 = "JDK" + 3 + 3.0; => int타입 '3', double타입 '3.0' String 타입으로 형변환
== , != , <= (동등비교연산자) *정수타입은 숫자의 값, 참조타입일때에는 객체의 주소를 비교

* new 연산자 (객체생성연산자)
	-무조건 해당 클래스로부터 객체를 생성(heap에)
	-뒤에 나오는 클래스의 생성자를 호출
	-heap에 생성한 객체의 주소를 "반환"한다

equals(Object anObject) - 두 문자열이 동일한지 비교(주소 비교 X)

* 생성자 
	-new 연산자에 의해 호출될 때, heap에 생성된 객체1의 인스턴스 필드의 초기화

* 논리연산자 (Short Circuit 원리)

	-논리곱(AND) : &, &&
	--------------------
	조건식1   |  조건식2
	--------------------
	   TRUE       TRUE	=> TRUE
	   TRUE      FALSE	=> FALSE
	   FALSE      TRUE	=> FALSE
	   FALSE     FALSE	=> FALSE

	-논리합(OR) : |, ||
	--------------------
	조건식1   |  조건식2
	--------------------
	   TRUE       TRUE	=> TRUE
	   TRUE      FALSE	=> TRUE
	   FALSE      TRUE	=> TRUE
	   FALSE     FALSE	=> FALSE

	-부정(NOT) : !
	!TRUE			=> FALSE
	!FALSE			=> TRUE

* 삼항연산자 문법
	int result = (조건식) ? 참일때 값 : 거짓일 때 값;

* 0.0 <= Math.random() < 1.0	=> [0.0, 1.0) half open
	-원하는 범위 내의 무작위 정수를 추출하는 방법
	-(int)(Math.random()* length(추출할 정수의 개수)) + offset(시작 위치);

* switch 조건에 넣을 수 있는 타입 - int, char, String

* 디버깅을 하려면, 중단점(break points)이 필요 -실행을 잠시 중단시키는 위치
